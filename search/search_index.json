{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started This repository is a monorepo for data platform solution. Requirements Install the following softwares node.js 16.x poetry pip install poetry == 1 .2.0b3 Installation using pipx is strongly recommended. Install dependencies npm install poetry install poetry run pre-commit install Terminal virtual environment poetry shell Run Flake8 Linting npx nx affected:lint or for a specific project npx nx lint <appName> Add new dependency npx nx run <appName>:add --name <dependencyName> == <dependencyVersion> Example: npx nx run core:add --name requests = 2 .27.1 Add new local dependency npx nx run <appName>:add --name <dependencyName> --local Example: npx nx run core:add --name development --local Using the Nx wrapper to adding a dependency ensure that both root poetry.lock and project poetry.lock are updated.","title":"Getting Started"},{"location":"#getting-started","text":"This repository is a monorepo for data platform solution.","title":"Getting Started"},{"location":"#requirements","text":"Install the following softwares node.js 16.x poetry pip install poetry == 1 .2.0b3 Installation using pipx is strongly recommended.","title":"Requirements"},{"location":"#install-dependencies","text":"npm install poetry install poetry run pre-commit install","title":"Install dependencies"},{"location":"#terminal-virtual-environment","text":"poetry shell","title":"Terminal virtual environment"},{"location":"#run-flake8-linting","text":"npx nx affected:lint or for a specific project npx nx lint <appName>","title":"Run Flake8 Linting"},{"location":"#add-new-dependency","text":"npx nx run <appName>:add --name <dependencyName> == <dependencyVersion> Example: npx nx run core:add --name requests = 2 .27.1","title":"Add new dependency"},{"location":"#add-new-local-dependency","text":"npx nx run <appName>:add --name <dependencyName> --local Example: npx nx run core:add --name development --local Using the Nx wrapper to adding a dependency ensure that both root poetry.lock and project poetry.lock are updated.","title":"Add new local dependency"},{"location":"summary/","text":"Getting Started Applications Libraries Dependency Graph","title":"Summary"},{"location":"reference/apps/financial/bot/fundamentus/","text":"financial-bot-fundamentus About Project description here. API Documentation Change log","title":"financial-bot-fundamentus"},{"location":"reference/apps/financial/bot/fundamentus/#financial-bot-fundamentus","text":"","title":"financial-bot-fundamentus"},{"location":"reference/apps/financial/bot/fundamentus/#about","text":"Project description here. API Documentation","title":"About"},{"location":"reference/apps/financial/bot/fundamentus/#change-log","text":"","title":"Change log"},{"location":"reference/apps/financial/bot/fundamentus/CHANGELOG/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . Unreleased","title":"Changelog"},{"location":"reference/apps/financial/bot/fundamentus/CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"reference/apps/financial/bot/fundamentus/CHANGELOG/#unreleased","text":"","title":"Unreleased"},{"location":"reference/apps/financial/bot/fundamentus/code_reference/bot/hello/","text":"Hello module. hello () Hello. Source code in apps/financial/bot/fundamentus/bot/hello.py 4 5 6 def hello (): \"\"\"Hello.\"\"\" return \"Hello financial-bot-fundamentus\"","title":"Hello"},{"location":"reference/apps/financial/bot/fundamentus/code_reference/bot/hello/#apps.financial.bot.fundamentus.bot.hello.hello","text":"Hello. Source code in apps/financial/bot/fundamentus/bot/hello.py 4 5 6 def hello (): \"\"\"Hello.\"\"\" return \"Hello financial-bot-fundamentus\"","title":"hello()"},{"location":"reference/libs/shared/core/","text":"shared-core About Shared Core. Change log","title":"shared-core"},{"location":"reference/libs/shared/core/#shared-core","text":"","title":"shared-core"},{"location":"reference/libs/shared/core/#about","text":"Shared Core.","title":"About"},{"location":"reference/libs/shared/core/#change-log","text":"","title":"Change log"},{"location":"reference/libs/shared/core/CHANGELOG/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . Unreleased","title":"Changelog"},{"location":"reference/libs/shared/core/CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"reference/libs/shared/core/CHANGELOG/#unreleased","text":"","title":"Unreleased"},{"location":"reference/libs/shared/core/code_reference/core/logging/","text":"Logging module. setup_logging ( module_name , propagate = False , log_level = os . getenv ( 'LOG_LEVEL' , 'INFO' ) . upper ()) Set up logging using JSON format. Parameters: Name Type Description Default module_name str The module name. required propagate bool Whether to propagate the logging to the parent logger. False log_level str The log level. os.getenv('LOG_LEVEL', 'INFO').upper() Returns: Type Description logging . Logger The logger. Source code in libs/shared/core/core/logging.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def setup_logging ( module_name : str , propagate : bool = False , log_level : str = os . getenv ( \"LOG_LEVEL\" , \"INFO\" ) . upper () ) -> logging . Logger : \"\"\" Set up logging using JSON format. Args: module_name (str): The module name. propagate (bool): Whether to propagate the logging to the parent logger. log_level (str): The log level. Returns: The logger. \"\"\" log_handler = logging . StreamHandler () formatter = jsonlogger . JsonFormatter ( \" %(levelname)s %(message)s \" ) log_handler . setFormatter ( formatter ) logger = logging . getLogger ( module_name ) logger . addHandler ( log_handler ) logger . propagate = propagate logger . setLevel ( logging . getLevelName ( log_level )) return logger","title":"Logging"},{"location":"reference/libs/shared/core/code_reference/core/logging/#libs.shared.core.core.logging.setup_logging","text":"Set up logging using JSON format. Parameters: Name Type Description Default module_name str The module name. required propagate bool Whether to propagate the logging to the parent logger. False log_level str The log level. os.getenv('LOG_LEVEL', 'INFO').upper() Returns: Type Description logging . Logger The logger. Source code in libs/shared/core/core/logging.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def setup_logging ( module_name : str , propagate : bool = False , log_level : str = os . getenv ( \"LOG_LEVEL\" , \"INFO\" ) . upper () ) -> logging . Logger : \"\"\" Set up logging using JSON format. Args: module_name (str): The module name. propagate (bool): Whether to propagate the logging to the parent logger. log_level (str): The log level. Returns: The logger. \"\"\" log_handler = logging . StreamHandler () formatter = jsonlogger . JsonFormatter ( \" %(levelname)s %(message)s \" ) log_handler . setFormatter ( formatter ) logger = logging . getLogger ( module_name ) logger . addHandler ( log_handler ) logger . propagate = propagate logger . setLevel ( logging . getLevelName ( log_level )) return logger","title":"setup_logging()"},{"location":"reference/libs/shared/core/code_reference/core/time/","text":"Time utils module. current_milli_time () Get the current time with milliseconds. Source code in libs/shared/core/core/time.py 6 7 8 def current_milli_time () -> int : \"\"\"Get the current time with milliseconds.\"\"\" return round ( time . time () * 1000 )","title":"Time"},{"location":"reference/libs/shared/core/code_reference/core/time/#libs.shared.core.core.time.current_milli_time","text":"Get the current time with milliseconds. Source code in libs/shared/core/core/time.py 6 7 8 def current_milli_time () -> int : \"\"\"Get the current time with milliseconds.\"\"\" return round ( time . time () * 1000 )","title":"current_milli_time()"},{"location":"reference/libs/shared/development/","text":"shared-development About Shared Unit Test and Development Change log","title":"shared-development"},{"location":"reference/libs/shared/development/#shared-development","text":"","title":"shared-development"},{"location":"reference/libs/shared/development/#about","text":"Shared Unit Test and Development","title":"About"},{"location":"reference/libs/shared/development/#change-log","text":"","title":"Change log"},{"location":"reference/libs/shared/development/CHANGELOG/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . Unreleased","title":"Changelog"},{"location":"reference/libs/shared/development/CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"reference/libs/shared/development/CHANGELOG/#unreleased","text":"","title":"Unreleased"}]}